    //Version 1.0 ->  @author DevMPoveaCL = Tipos de variables en Java y ejemplos.

    1) Variables primitivas: tipos de datos básicos que representan valores simples como enteros, decimales, caracteres, booleanos, entre otros.
        byte: representa números enteros de 8 bits con signo, con un rango de -128 a 127.
        short: representa números enteros de 16 bits con signo, con un rango de -32,768 a 32,767.
        int: representa números enteros de 32 bits con signo, con un rango de -2,147,483,648 a 2,147,483,647.
        long: representa números enteros de 64 bits con signo, con un rango de -9,223,372,036,854,775,808 a 9,223,372,036,854,775,807.
        float: representa números de punto flotante de precisión simple de 32 bits (números de hasta 7 decimales).
        double: representa números de punto flotante de doble precisión de 64 bits (números de hasta 15 decimales).
        char: representa un único carácter Unicode de 16 bits.
        boolean: representa un valor booleano, que puede ser true o false.


    2)Variables de referencia: variables que hacen referencia a un objeto o instancia de una clase.
        String cadena = "Hola"; //objeto String
        ArrayList<Integer> listaNumeros = new ArrayList<Integer>(); //objeto ArrayList 

        Explicación: la variable "cadena" hace referencia a un objeto String y la variable "listaNumeros" hace referencia a un objeto ArrayList.
        Importante:  "String" -> es considerada una clase en Java, es por ello que inicia con mayúscula, ya que por buenas prácticas toda clase debe iniciar con mayús.
                     "ArrayList" -> es una estructura de datos que representa una lista dinámica (tambien es una considerado una clase en Java). Internamente, un ArrayList utiliza un array para almacenar los elementos, pero proporciona métodos adicionales para agregar, eliminar, buscar y ordenar elementos de manera eficiente. 
                                    Además, un ArrayList solo puede contener objetos, no tipos primitivos, lo que significa que, por ejemplo, no puede contener un int, sino un Integer.


    3)Variables de instancia: variables que pertenecen a una instancia particular de una clase y pueden tener valores diferentes en cada instancia.
        public class Persona {
            private String nombre; // variable de instancia

            // Método setter para establecer el nombre de la persona
            public void setNombre(String nombre) {
                this.nombre = nombre; // "this" se refiere al objeto actual
            }
        }

        // Crear dos instancias de la clase Persona
        Persona persona1 = new Persona();
        Persona persona2 = new Persona();
        // Establecer los nombres de las dos personas
        persona1.setNombre("Juan");
        persona2.setNombre("Maria");

        Explicación: "Persona" posee una variable de instancia llamada "nombre" que puede tener valores diferentes para cada instancia de la clase.


    4)Variables de clase: variables que pertenecen a una clase en su conjunto y no a instancias específicas de la clase.
        public class Persona {
            private static int numPersonas = 0; // variable estática que contará el número de instancias creadas
            public Persona() {
                numPersonas++; // aumenta el contador cada vez que se crea una nueva instancia de la clase Persona
            }

            public static int getNumPersonas() { // método estático para obtener el número de instancias creadas
                return numPersonas;
            }
        }

        Persona persona1 = new Persona(); // se crea la primera instancia de la clase Persona
        Persona persona2 = new Persona(); // se crea la segunda instancia de la clase Persona
        System.out.println(Persona.getNumPersonas()); // se imprime el número de instancias creadas, en este caso 2

        Explicación: la clase "Persona" tiene una variable de clase llamada "numPersonas" que se utiliza para contar el número de instancias creadas de la clase.
        Importante: por lo general, se agrega "static" para indicar que la variable es compartida por todas las instancias de la clase y no se vincula a una instancia particular 
                    (no siempre se le agrega "static" a una variable de clase, sino que se identifica a raíz del contexto por ser tratada como una constante, ejemplo "PI" para un círculo... 
                    siempre tendrá el mismo valor, por ende se relaciona dentro de la clase círculo como variable de clase pero sin "static").


    5)Variables locales: variables declaradas dentro de un método o bloque y cuyo alcance está limitado a ese método o bloque.
        public int suma(int num1, int num2) {
            int resultado = num1 + num2; //variable local
            return resultado;
        }

        Explicación: la variable "resultado" es una variable local que almacena el resultado de la suma de "num1" y "num2" en el método "suma".


    6)Variables estáticas: variables que pertenecen a una clase en su conjunto y se comparten entre todas las instancias de la clase.
        public class Persona {
            private static String nombre = "Sin nombre"; // variable de clase "nombre" con valor predeterminado "Sin nombre"
            
            public static void setNombre(String nombre) { // método estático que establece el valor de la variable de clase "nombre"
                Persona.nombre = nombre; // establece el valor de la variable de clase "nombre" a través del nombre de la clase
            }
            
            public static String getNombre() { // método estático que devuelve el valor de la variable de clase "nombre"
                return nombre; // devuelve el valor de la variable de clase "nombre"
            }
        }

        Persona.setNombre("Juan"); // llama al método estático "setNombre" de la clase "Persona" para establecer el valor de la variable de clase "nombre" a "Juan"
        System.out.println(Persona.getNombre()); // llama al método estático "getNombre" de la clase "Persona" para imprimir el valor de la variable de clase "nombre"

        Explicación: "Persona" posee una variable estática llamada "nombre" que se utiliza para almacenar y acceder al nombre de la persona.
