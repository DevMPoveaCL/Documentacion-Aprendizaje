//Version 1.0 -> @author DevMPoveaCL = Tipos de métodos en Java y ejemplos.

1.  Métodos de instancia: pertenecen a una instancia de una clase y pueden acceder a las variables de instancia de la misma. Se definen sin la palabra clave "static" y se invocan sobre una instancia de la clase.
        Método getter (instancia de acceso): se utiliza para obtener el valor de un campo de una clase. El nombre del método comienza con "get" seguido del nombre del campo en camelCase.
        Ejemplo:
        public class Persona {
        private String nombre;
            // Getter
            public String getNombre() {
                return nombre;
            }
            }

            Persona persona1 = new Persona();
            persona1.setNombre("Juan");
            String nombre = persona1.getNombre();

            Explicación: en este ejemplo, el método getNombre() es un método de instancia de acceso que permite obtener el valor de la variable de instancia nombre.
                        sin este no podríamos acceder ya que el atributo String nombre es privado y java nos arrojará error de compilación.

        Método setter (instancia de modificación): se utiliza para establecer el valor de un campo de una clase. El nombre del método comienza con "set" seguido del nombre del campo en camelCase.
        Ejemplo:
        public class Persona {
        private int edad;

            // Setter
            public void setEdad(int edad) {
                if (edad >= 0 && edad <= 120) {
                    this.edad = edad;
                }
            }
            }

            Persona persona = new Persona();
            persona.setEdad(30);

            Explicación: en este ejemplo, el método setEdad() es un método de instancia de modificación que permite establecer el valor de la variable de instancia edad.
                        el método valida que la edad esté dentro de un rango válido y si lo está, asigna el valor a la variable de instancia.
                        notar que nuevamente el atributo int edad se encuentra como privado así que sin el setter no podríamos modificarlo(error de compilación).

        Método constructor: asegura que los objetos se inicialicen correctamente y estén listos para su uso. El constructor tiene el mismo nombre que la clase y no tiene tipo de retorno.
        también se puede usar para realizar otras tareas de inicialización, como la asignación de valores predeterminados a los atributos.
        Ejemplo:
        public class Persona {
        private String nombre;
        private int edad;

            // Constructor
            public Persona(String nombre, int edad) {
                this.nombre = nombre;
                this.edad = edad;
            }
            }

            Persona persona1 = new Persona("Juan", 25);

            Explicación: en este ejemplo, el método Persona() es un método de instancia constructor que se utiliza para crear un objeto de la clase Persona.
                        el constructor recibe dos parámetros, nombre y edad, y los asigna a las variables de instancia correspondientes.
                        el constructor se llama automáticamente cuando se crea un objeto de la clase utilizando el operador "new". Al llamar al constructor,
                        se reservará un espacio en memoria para el objeto y se inicializarán los atributos.

        Método toString: devuelve una representación en cadena de un objeto. Se utiliza a menudo para imprimir el objeto en la consola.
        Ejemplo:
        public class Persona {
        private String nombre;
        private int edad;
        
            // Método toString
            public String toString() {
                return "Persona [nombre=" + nombre + ", edad=" + edad + "]";
            }
            }
            Persona persona1 = new Persona("Juan", 25);
            System.out.println(persona1.toString());

            Explicación: define la clase Persona con dos atributos (nombre y edad) y un método toString que retorna una representación en forma de cadena de la clase. 
                        Luego, se crea una instancia de Persona con los valores "Juan" y 25, y se imprime su representación en forma de cadena mediante el método toString().

        Método equals: se utiliza para comparar si dos objetos son iguales. 
                    este método compara el contenido de los campos de dos objetos en lugar de las referencias de objeto en sí.
        Ejemplo: 
        public class Persona {
        private String nombre;
        private int edad;

            public boolean equals(Object obj) {
                if (obj == null || getClass() != obj.getClass()) {
                    return false;
                }
                Persona persona = (Persona) obj;
                return Objects.equals(nombre, persona.nombre) && edad == persona.edad;
            }
            }

            Persona persona1 = new Persona("Juan", 30);
            Persona persona2 = new Persona("Juan", 30);
            boolean sonIguales = persona1.equals(persona2);

            Explicación: en este ejemplo, el método equals() es un método de instancia de igualdad que compara si dos objetos de la clase Persona son iguales. 
                        el método compara si los nombres y las edades de ambos objetos son iguales utilizando el método Objects.equals() que compara dos objetos de forma segura.

        Método de acción o comportamiento: se utiliza para definir acciones o comportamientos de la clase.
        Ejemplo:
        public class Persona {
        private String nombre;

            public void saludar() {
                System.out.println("Hola, mi nombre es " + nombre);
            }
            }

            Persona persona = new Persona("Juan");
            persona.saludar();

            Explicación: en este ejemplo, el método saludar() es un método de instancia de comportamiento que imprime un mensaje por pantalla utilizando 
                        el valor de la variable de instancia nombre.

2.  Métodos estáticos: 
        Métodos estáticos utilitarios:  son métodos que proporcionan utilidades generales que no están relacionadas con la instancia de una clase. Por ejemplo:
                                        Math.max(a, b) devuelve el valor máximo entre dos números a y b.
                                        Arrays.sort(array) ordena un arreglo array.
                                        Collections.sort(lista) ordena una lista lista.

        Métodos de fábrica estáticos: son métodos que crean y devuelven instancias de una clase. Por ejemplo:
                                      Integer.valueOf(String) crea y devuelve un objeto de la clase Integer a partir de una cadena de texto.
                                      LocalDateTime.of(int year, int month, int dayOfMonth, int hour, int minute) crea y devuelve un objeto LocalDateTime a partir de los valores de fecha y hora proporcionados.

        Métodos estáticos de referencia: son métodos que se utilizan para referirse a un método de instancia. Por ejemplo:
                                         String::compareToIgnoreCase se utiliza para referirse al método compareToIgnoreCase de la clase String.
                                         ArrayList::new se utiliza para referirse al constructor de la clase ArrayList.

        Métodos estáticos de inicialización: son métodos que se utilizan para inicializar la clase y sus variables estáticas. Por ejemplo:
                                             public static void main(String[] args) es un método estático que se utiliza para iniciar la aplicación Java.
                                             static { /* código de inicialización */ } es un bloque estático que se utiliza para inicializar variables estáticas de la clase.

3.  Métodos abstractos: son aquellos métodos que se definen en una interfaz y no tienen una implementación en dicha interfaz. La implementación se proporciona en las clases que implementan la interfaz.

4.  Métodos finales: son aquellos métodos que no pueden ser sobreescritos en las clases hijas. Se definen con la palabra clave "final".

5.  Métodos privados: son aquellos métodos que solo pueden ser accedidos dentro de la misma clase en la que se definen. Se definen con la palabra clave "private".

6.  Métodos protegidos: son aquellos métodos que solo pueden ser accedidos dentro de la misma clase o por clases que heredan de la misma. Se definen con la palabra clave "protected".

7.  Métodos sincronizados: son aquellos métodos que solo pueden ser accedidos por un hilo a la vez. Se definen con la palabra clave "synchronized".

8.  Métodos nativos: son aquellos métodos que tienen una implementación nativa en el lenguaje de programación subyacente y no en Java. Se definen con la palabra clave "native".
    