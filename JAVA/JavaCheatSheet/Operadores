//Version 1.0 ->  @author DevMPoveaCL = Tipos de operadores en Java y ejemplos.

1) Operadores Aritméticos:  suma, resta, multiplicación, división y "módulo" (%) -> resto de la división

2) Operadores de asignación: asignar valores a las variables 
    asignación simple (=)
    operadores compuestos (+=, -=, *=, /=, %=, &=, |=, ^=, <<=, >>=, >>>=).
    Ejemplos:
        int num = 5; // la variable num tiene un valor de 5
        num += 3; // es equivalente a num = num + 3, la variable num ahora tiene un valor de 8
        num -= 2; // es equivalente a num = num - 2, la variable num ahora tiene un valor de 6
        num *= 2; // es equivalente a num = num * 2, la variable num ahora tiene un valor de 12
        num /= 4; // es equivalente a num = num / 4, la variable num ahora tiene un valor de 3
        num %= 2; // es equivalente a num = num % 2, la variable num ahora tiene un valor de 1
        Subtipo de asignación (asignación bitwise): asignan un valor a una variable y realizan una operación bitwise al mismo tiempo, es decir, la variable trabaja sobre los "bits".
            int num = 5; // la variable num tiene un valor de 5          
            num &= 3; // es equivalente a num = num & 3, la variable num ahora tiene un valor de 1
            num |= 8; // es equivalente a num = num | 8, la variable num ahora tiene un valor de 9
            num ^= 6; // es equivalente a num = num ^ 6, la variable num ahora tiene un valor de 15
            num <<= 2; // es equivalente a num = num << 2, la variable num ahora tiene un valor de 60
            num >>= 3; // es equivalente a num = num >> 3, la variable num ahora tiene un valor de 7
            num >>>= 1; // es equivalente a num = num >>> 1, la variable num ahora tiene un valor de 3

3) Operadores de comparación: compara dos valores y devuelve un valor booleano verdadero o falso: ==, !=, <, >, <=, >=.
    Igualdad (==): compara si dos valores son iguales. Devuelve true si los valores son iguales y false si son diferentes.
    Ejemplo: 5 == 5 devuelve true y 5 == 4 devuelve false.

    Desigualdad (!=): compara si dos valores son diferentes. Devuelve true si los valores son diferentes y false si son iguales.
    Ejemplo: 5 != 5 devuelve false y 5 != 4 devuelve true.

    Mayor que (>): compara si un valor es mayor que otro. Devuelve true si el primer valor es mayor que el segundo y false si no lo es.
    Ejemplo: 5 > 4 devuelve true y 4 > 5 devuelve false.

    Menor que (<): compara si un valor es menor que otro. Devuelve true si el primer valor es menor que el segundo y false si no lo es.
    Ejemplo: 4 < 5 devuelve true y 5 < 4 devuelve false.

    Menor o igual que (<=): compara si un valor es menor o igual que otro. Devuelve true si el primer valor es menor o igual que el segundo y false si no lo es.
    Ejemplo: 5 <= 5 devuelve true y 5 <= 4 devuelve false.

    Mayor o igual que (>=): compara si un valor es mayor o igual que otro. Devuelve true si el primer valor es mayor o igual que el segundo y false si no lo es.
    Ejemplo: 5 >= 5 devuelve true y 4 >= 5 devuelve false.

4) Operadores lógicos: combinan dos o más expresiones booleanas y devuelven un valor booleano, como && (y), || (o), ! (no).
    Operador && (AND): devuelve true si y solo si ambos operandos son verdaderos.
    Ejemplo: 
        boolean a = true;
        boolean b = false;
        boolean resultado = a && b; // resultado es false
    
    Operador || (OR): devuelve true si al menos uno de los operandos es verdadero.
    Ejemplo: 
        boolean a = true;
        boolean b = false;
        boolean resultado = a || b; // resultado es true
    
    Operador ! (NOT): invierte el valor de verdad del operando.
    Ejemplo: 
        boolean a = true;
        boolean resultado = !a; // resultado es false
    
    Importante: se utilizaron variables booleanas en los ejemplos, pero los operadores lógicos también se pueden utilizar con expresiones más complejas que devuelvan valores booleanos.

5) Operadores de bits: se utilizan para realizar operaciones a nivel de bits en los valores numéricos:
     & (y bit a bit): compara los bits de dos números enteros y devuelve un resultado que tiene un 1 en los bits en los que ambos números tienen un 1. De lo contrario, devuelve un 0
     Ejemplo:
        int a = 0b1010; // 10 en binario
        int b = 0b1100; // 12 en binario
        int c = a & b; // c es igual a 0b1000, o sea 8 en decimal

     | (o bit a bit): compara los bits de dos números enteros y devuelve un resultado que tiene un 1 en los bits en los que al menos uno de los números tiene un 1. De lo contrario, devuelve un 0
     Ejemplo:   
        int a = 0b1010; // 10 en binario
        int b = 0b1100; // 12 en binario
        int c = a | b; // c es igual a 0b1110, o sea 14 en decimal

     ^ (xor bit a bit): compara los bits de dos números enteros y devuelve un resultado que tiene un 1 en los bits en los que solo uno de los números tiene un 1
     Ejemplo:
        int a = 0b1010; // 10 en binario
        int b = 0b1100; // 12 en binario
        int c = a ^ b; // c es igual a 0b0110, o sea 6 en decimal

     ~ (no bit a bit): invierte los bits de un número entero, es decir, cambia todos los 0 por 1 y viceversa
     Ejemplo: 
        int a = 0b1010; // 10 en binario
        int b = ~a; // b es igual a 0b11111111111111111111111111110101, o sea -11 en decimal

     << (desplazamiento a la izquierda) y >> (desplazamiento a la derecha): desplazan los bits de un número entero hacia la izquierda o hacia la derecha
     Ejemplo:
        int a = 0b1010; // 10 en binario
        int b = a << 2; // b es igual a 0b101000, o sea 40 en decimal
        int c = a >> 1; // c es igual a 0b0101, o sea 5 en decimal


     >>> (desplazamiento sin signo a la derecha): mueve todos los bits de un número a la derecha y rellena los bits más significativos (el bit más a la izquierda) con ceros. Este operador se utiliza en operaciones en las que se quiere dividir un número por dos elevado a una potencia determinada
     Ejemplo:
        int a = 0b11110000; // Valor decimal 240 en binario
        int b = a >>> 4; // Desplazamiento sin signo de 4 bits hacia la derecha
        System.out.println(b); // Imprime 15 (equivalente a 0b1111 en binario)

6) Operador condicional "?" (ternario):  evalua una expresión y devuelve uno de dos valores posibles según si la expresión es verdadera o falsa
     Ejemplo: condicion ? expresion_verdadera : expresion_falsa; La idea es que la condicion sea evaluada y si es verdadera, se evalúa y devuelve la expresion_verdadera. Si la condicion es falsa, se evalúa y devuelve la expresion_falsa.
        int edad = 18;
        String mensaje = (edad >= 18) ? "Eres mayor de edad" : "Eres menor de edad";
        System.out.println(mensaje); // Imprime "Eres mayor de edad"

        Importante: el uso excesivo de operadores ternarios puede dificultar la legibilidad del código, por lo que se recomienda utilizarlos solo en casos simples y de manera moderada.

7) Operador de instancia (instanceof): comprueba si un objeto es una instancia de una clase determinada o si pertenece a una subclase de esa clase.
     Ejemplo:
        Object obj = new ArrayList();
        if (obj instanceof ArrayList) {
            System.out.println("obj es una instancia de ArrayList");
        }
        Explicación: se crea un objeto ArrayList y se lo asigna a una variable de tipo Object. Luego, se utiliza el operador instanceof para verificar si obj es una instancia de ArrayList. Como es cierto, se imprime "obj es una instancia de ArrayList".

8) Operadores de acceso: utilizados para acceder a los miembros de un objeto o clase, como el operador punto (.) y el operador de acceso de ámbito (::).
     Operador de acceso de miembro ("."): El operador de punto es el más común y se utiliza para acceder a los miembros de una instancia de una clase
     Ejemplo:
        public class Persona {
        private String nombre;
        public String getNombre() {
            return nombre;
        }
        }

        Persona persona1 = new Persona();
        persona1.nombre = "Juan"; // ERROR: nombre es privado y no se puede acceder directamente
        String nombre = persona1.getNombre(); // Accede al nombre mediante el método getNombre()
     
     Operador de acceso de alcance (::): se suele utilizar para hacer referencia a un método estático o un constructor de una clase.
     Ejemplo:
        // Definición de la interfaz Operacion
        interface Operacion {
        // Método estático para sumar dos enteros
        static int suma(int a, int b) {
            return a + b;
        }
        }

        // Clase Calculadora
        class Calculadora {
        // Método para calcular usando el operador de acceso de alcance ::
        public int calcular(int a, int b) {
            return Operacion::suma(a, b);
        }
        }

        // Ejemplo de uso
        Calculadora calc = new Calculadora();
        int resultado = calc.calcular(3, 4);
        System.out.println(resultado); // imprime 7

        


   

